PARSER_BEGIN(test)
class test{
 
 public static void main(String[] args) throws  ParseException{
   try
   {
    test analizador = new test(System.in);
    analizador.Programa();
    System.out.println("Se compilo con exito"); 
   }
   catch(ParseException ex)
   {
    System.out.println(ex.getMessage());
    System.out.println("Se han encontrado errores"); 
   }

  
 }
 
}
PARSER_END(test)

TOKEN:
{
 <Identificador: ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","_","0"-"9"])*>{
     token = new TokenYTipo("Identificador", image.toString());
   }
 |<Asignacion: "="  >{
     token = new TokenYTipo("Asignacion", image.toString());
   }
 |<NUMERO: (["0"-"9"])+("."(["0"-"9"])+)?  >{
     token = new TokenYTipo("NUMERO", image.toString()); 
   }
 |<OperadorPrimario: "+" |"-">{
      token = new TokenYTipo("OperadorPrimario", image.toString()); 
   }
 |<OperadorSecundario: "*"|"/">{
     token = new TokenYTipo("OperadorSecundario", image.toString());
   }
 |<FinDeLinea: ";" > {
 	token = new TokenYTipo("FinDeLinea", image.toString());
   }

}


void Programa():
{}
{
 (<Identificador><Asignacion>OperacionPrimaria()<FinDeLinea>)* <EOF> 
}
void Operando():
{}
{
 <NUMERO>
 |<Identificador>
}


void OperacionPrimaria():
{}
{
 OperacionSecundaria()(<OperadorPrimario>OperacionSecundaria())*
} 

void OperacionSecundaria():
{}
{
	Operando()(<OperadorSecundario>Operando())*
	
 } 
SKIP:
{
  " "
| "\n"
| "\t"
| "\r"
}	